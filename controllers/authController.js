const passport = require('passport');
const crypto = require('crypto');
const mongoose = require('mongoose');

const User = mongoose.model('User');
const promisify = require('es6-promisify');
const mail = require('../handlers/mail');

exports.login = passport.authenticate('local', {
  failureRedirect: '/login',
  failureFlash: '–ù–µ—É—Å–ø–µ—à–Ω–æ –≤–ª–∏–∑–∞–Ω–µ!',
  successRedirect: '/',
  successFlash: '–í–ª—è–∑–æ—Ö—Ç–µ —É—Å–ø–µ—à–Ω–æ!'
});

exports.logout = (req, res) => {
  req.logout();
  req.flash('success', '–ò–∑–ª—è–∑–æ—Ö—Ç–µ —É—Å–ø–µ—à–Ω–æ! üëã');
  res.redirect('/');
};

exports.isLoggedIn = (req, res, next) => {
  // first check if the user is authenticated
  if (req.isAuthenticated()) {
    next(); // carry on! They are logged in!
    return;
  }
  req.flash('error', '–û–ø–∞! –¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–µ –≤–ª–µ–∑–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏, –∑–∞ –¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç–µ —Ç–æ–≤–∞!');
  res.redirect('/login');
};

exports.isAdmin = (req, res, next) => {
  // first check if the user is administrator
  if (req.user.level === 10) {
    next(); // carry on! They are admins
    return;
  }
  req.flash('error', '–ù—è–º–∞—Ç–µ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –ø—Ä–∞–≤–∞ –∑–∞ —Ç–æ–≤–∞!');
  res.redirect('/');
};

exports.forgot = async (req, res) => {
  // 1. See if a user with that email exists
  const user = await User.findOne({ email: req.body.email });
  if (!user) {
    req.flash('error', '–ù–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –ø—Ä–æ—Ñ–∏–ª —Å —Ç–æ–∑–∏ –∏–º–µ–π–ª –∞–¥—Ä–µ—Å');
    return res.redirect('/login');
  }
  // 2. Set reset tokens and expiry on their account
  user.resetPasswordToken = crypto.randomBytes(20).toString('hex');
  user.resetPasswordExpires = Date.now() + 3600000; // 1 hour from now
  await user.save();
  // 3. Send them an email with the token
  const resetURL = `http://${req.headers.host}/account/reset/${user.resetPasswordToken}`;
  await mail.send({
    user,
    filename: 'password-reset',
    subject: '–ó–∞–±—Ä–∞–≤–µ–Ω–∞ –ø–∞—Ä–æ–ª–∞',
    resetURL
  });
  req.flash('success', '–ü–æ–ª—É—á–∏—Ö—Ç–µ –∏–º–µ–π–ª —Å –≤—Ä—ä–∑–∫–∞ –∑–∞ –Ω—É–ª–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞.');
  // 4. redirect to login page
  res.redirect('/login');
};

exports.reset = async (req, res) => {
  const user = await User.findOne({
    resetPasswordToken: req.params.token,
    resetPasswordExpires: { $gt: Date.now() }
  });
  if (!user) {
    req.flash('error', '–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞ –µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ –∏–ª–∏ –µ –∏–∑—Ç–µ–∫–ª–æ');
    return res.redirect('/login');
  }
  // if there is a user, show the rest password form
  res.render('reset', { title: '–ó–∞–±—Ä–∞–≤–µ–Ω–∞ –ø–∞—Ä–æ–ª–∞' });
};

exports.confirmedPasswords = (req, res, next) => {
  if (req.body.password === req.body['password-confirm']) {
    next(); // keepit going!
    return;
  }
  req.flash('error', '–ü–∞—Ä–æ–ª–∏—Ç–µ –Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç!');
  res.redirect('back');
};

exports.update = async (req, res) => {
  const user = await User.findOne({
    resetPasswordToken: req.params.token,
    resetPasswordExpires: { $gt: Date.now() }
  });

  if (!user) {
    req.flash('error', '–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞ –µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ –∏–ª–∏ –µ –∏–∑—Ç–µ–∫–ª–æ');
    return res.redirect('/login');
  }

  const setPassword = promisify(user.setPassword, user);
  await setPassword(req.body.password);
  user.resetPasswordToken = undefined;
  user.resetPasswordExpires = undefined;
  const updatedUser = await user.save();
  await req.login(updatedUser);
  req.flash('success', 'üíÉ –°—É–ø–µ—Ä! –í–µ—á–µ –º–æ–∂–µ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—à –Ω–æ–≤–∞—Ç–∞ —Å–∏ –ø–∞—Ä–æ–ª–∞! –í–µ—á–µ —Å–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–∞ —Å–∏!');
  res.redirect('/');
};

exports.updateExistingPassword = async (req, res, next) => {
  const user = await User.findOne(
    { _id: req.user._id }
  );

  if (req.body.password) {
    const setPassword = promisify(user.setPassword, user);
    await setPassword(req.body.password);
    const updatedUser = await user.save();
    await req.login(updatedUser);
    req.flash('success', 'üíÉ –°—É–ø–µ—Ä! –í–µ—á–µ –º–æ–∂–µ –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—à –Ω–æ–≤–∞—Ç–∞ —Å–∏ –ø–∞—Ä–æ–ª–∞!');
  }
  return next();
};
